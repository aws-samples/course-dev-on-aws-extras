AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Trivia Game

Resources:

  TriviaWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: TriviaWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  TriviaConnections:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      - AttributeName: "gameId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "gameId"
        KeyType: "HASH"
      - AttributeName: "connectionId"
        KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  NewGameRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TriviaWebSocket
      RouteKey: newgame
      AuthorizationType: NONE
      OperationName: NewGameRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref NewGameInteg
  NewGameInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TriviaWebSocket
      Description: NewGame Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NewGameFunction.Arn}/invocations
  NewGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: back-end-python/gameactions/
      Handler: app.trivia_newgame
      Runtime: python3.7
      Environment:
        Variables:
          TABLE_NAME: !Ref TriviaConnections
          APIGW_ENDPOINT:  !Sub "https://${TriviaWebSocket}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TriviaConnections
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TriviaWebSocket}/*'
  NewGamePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TriviaWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NewGameFunction
      Principal: apigateway.amazonaws.com

  JoinGameRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TriviaWebSocket
      RouteKey: joingame
      AuthorizationType: NONE
      OperationName: JoinGameRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref JoinGameInteg
  JoinGameInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TriviaWebSocket
      Description: JoinGame Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JoinGameFunction.Arn}/invocations
  JoinGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: back-end-python/gameactions/
      Handler: app.trivia_joingame
      Runtime: python3.7
      Environment:
        Variables:
          TABLE_NAME: !Ref TriviaConnections
          APIGW_ENDPOINT:  !Sub "https://${TriviaWebSocket}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TriviaConnections
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TriviaWebSocket}/*'
  JoinGamePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TriviaWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref JoinGameFunction
      Principal: apigateway.amazonaws.com

  StartGameRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TriviaWebSocket
      RouteKey: startgame
      AuthorizationType: NONE
      OperationName: StartGameRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref StartGameInteg
  StartGameInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TriviaWebSocket
      Description: StartGame Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartGameFunction.Arn}/invocations
  StartGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: back-end-python/gameactions/
      Handler: app.trivia_startgame
      Runtime: python3.7
      Environment:
        Variables:
          TABLE_NAME: !Ref TriviaConnections
          APIGW_ENDPOINT:  !Sub "https://${TriviaWebSocket}.execute-api.${AWS::Region}.amazonaws.com/Prod"
          STATE_MACHINE: !Ref TriviaStateMachine
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TriviaConnections
      - Statement:
        - Effect: Allow
          Action:
          - 'states:StartExecution'
          Resource:
          - '*'
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TriviaWebSocket}/*'
  StartGamePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TriviaWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartGameFunction
      Principal: apigateway.amazonaws.com

  AnswerRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TriviaWebSocket
      RouteKey: answer
      AuthorizationType: NONE
      OperationName: AnswerRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref AnswerInteg
  AnswerInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TriviaWebSocket
      Description: Answer Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AnswerFunction.Arn}/invocations
  AnswerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: back-end-python/gameactions/
      Handler: app.trivia_answer
      Runtime: python3.7
      Environment:
        Variables:
          TABLE_NAME: !Ref TriviaConnections
          APIGW_ENDPOINT:  !Sub "https://${TriviaWebSocket}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TriviaConnections
      - Statement:
        - Effect: Allow
          Action:
          - 'states:StartExecution'
          Resource:
          - '*'
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TriviaWebSocket}/*'
  AnswerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TriviaWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AnswerFunction
      Principal: apigateway.amazonaws.com

  QuestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: back-end-python/gameactions/
      Handler: app.trivia_question
      Runtime: python3.7
      Environment:
        Variables:
          TABLE_NAME: !Ref TriviaConnections
          APIGW_ENDPOINT:  !Sub "https://${TriviaWebSocket}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TriviaConnections
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TriviaWebSocket}/*'

  CalculateScoresFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: back-end-python/gameactions/
      Handler: app.trivia_calculate_scores
      Runtime: python3.7
      Environment:
        Variables:
          TABLE_NAME: !Ref TriviaConnections
          APIGW_ENDPOINT:  !Sub "https://${TriviaWebSocket}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TriviaConnections
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TriviaWebSocket}/*'

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
     - NewGameRoute
     - JoinGameRoute
     - NewGameRoute
     - JoinGameRoute
     - StartGameRoute
     - AnswerRoute

    Properties:
      ApiId: !Ref TriviaWebSocket

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref TriviaWebSocket

  TriviaStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref QuestionFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CalculateScoresFunction
      Definition:
        StartAt: Question
        States:
          Question:
            Type: Task
            Resource: !GetAtt QuestionFunction.Arn
            Next: QuestionWait
            ResultPath:
          QuestionWait:
            Type: Wait
            SecondsPath: $.waitseconds
            Next: Scores
          Scores:
            Type: Task
            Resource: !GetAtt CalculateScoresFunction.Arn
            Next: IsGameOver
            ResultPath: "$.iterator"
          IsGameOver:
            Type: Choice
            Choices:
            - Variable: "$.iterator.IsGameOver"
              BooleanEquals: true
              Next: GameOver
            Default: Question
          GameOver:
            Type: Succeed


Outputs:
  TriviaWebSocketApi:
    Description: "API Gateway websockets endpoint"
    Value: !Sub "wss://${TriviaWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
